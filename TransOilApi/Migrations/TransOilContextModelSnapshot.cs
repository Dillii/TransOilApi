// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TransOilApi.DataBase;

#nullable disable

namespace TransOilApi.Migrations
{
    [DbContext(typeof(TransOilContext))]
    partial class TransOilContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TransOilApi")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TransOilApi.DataBase.Models.CalculationMeter", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ElectricityMeasurementPointId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("ElectricitySupplyPointId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ElectricitySupplyPointId");

                    b.HasIndex("ElectricityMeasurementPointId", "ElectricitySupplyPointId")
                        .IsUnique();

                    b.ToTable("CalculationMeters", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ChildOrganization", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganisationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Name", "Address")
                        .IsUnique();

                    b.ToTable("ChildOrganizations", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ConsumptionObject", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ChildOrganizationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChildOrganizationId");

                    b.HasIndex("ObjectName", "Address")
                        .IsUnique();

                    b.ToTable("ConsumptionObjects", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.CurrentTransformer", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime>("CheckingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("KTT")
                        .HasColumnType("double precision");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("CurrentTransformers", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ElectricEnergyMeter", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime>("CheckingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ElectricEnergyMeters", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ElectricityMeasurementPoint", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ConsumptionObjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentTransformerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("ElectricEnergyMeterId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("VoltageTransformerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionObjectId");

                    b.HasIndex("CurrentTransformerId")
                        .IsUnique();

                    b.HasIndex("ElectricEnergyMeterId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VoltageTransformerId")
                        .IsUnique();

                    b.ToTable("ElectricityMeasurementPoints", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ElectricitySupplyPoint", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<int?>("MaxPower")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ElectricitySupplyPoints", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.Organisation", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Address")
                        .IsUnique();

                    b.ToTable("Organizations", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.VoltageTransformer", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime>("CheckingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("KTN")
                        .HasColumnType("double precision");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("VoltageTransformers", "TransOilApi");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.CalculationMeter", b =>
                {
                    b.HasOne("TransOilApi.DataBase.Models.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithMany()
                        .HasForeignKey("ElectricityMeasurementPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransOilApi.DataBase.Models.ElectricitySupplyPoint", "ElectricitySupplyPoint")
                        .WithMany()
                        .HasForeignKey("ElectricitySupplyPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectricityMeasurementPoint");

                    b.Navigation("ElectricitySupplyPoint");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ChildOrganization", b =>
                {
                    b.HasOne("TransOilApi.DataBase.Models.Organisation", "Organisation")
                        .WithMany("Children")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ConsumptionObject", b =>
                {
                    b.HasOne("TransOilApi.DataBase.Models.ChildOrganization", "ChildOrganization")
                        .WithMany("ConsumptionObjects")
                        .HasForeignKey("ChildOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildOrganization");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ElectricityMeasurementPoint", b =>
                {
                    b.HasOne("TransOilApi.DataBase.Models.ConsumptionObject", "ConsumptionObject")
                        .WithMany("ElectricityMeasurementPoints")
                        .HasForeignKey("ConsumptionObjectId");

                    b.HasOne("TransOilApi.DataBase.Models.CurrentTransformer", "CurrentTransformer")
                        .WithOne("ElectricityMeasurementPoint")
                        .HasForeignKey("TransOilApi.DataBase.Models.ElectricityMeasurementPoint", "CurrentTransformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransOilApi.DataBase.Models.ElectricEnergyMeter", "ElectricEnergyMeter")
                        .WithOne("ElectricityMeasurementPoint")
                        .HasForeignKey("TransOilApi.DataBase.Models.ElectricityMeasurementPoint", "ElectricEnergyMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransOilApi.DataBase.Models.VoltageTransformer", "VoltageTransformer")
                        .WithOne("ElectricityMeasurementPoint")
                        .HasForeignKey("TransOilApi.DataBase.Models.ElectricityMeasurementPoint", "VoltageTransformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumptionObject");

                    b.Navigation("CurrentTransformer");

                    b.Navigation("ElectricEnergyMeter");

                    b.Navigation("VoltageTransformer");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ChildOrganization", b =>
                {
                    b.Navigation("ConsumptionObjects");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ConsumptionObject", b =>
                {
                    b.Navigation("ElectricityMeasurementPoints");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.CurrentTransformer", b =>
                {
                    b.Navigation("ElectricityMeasurementPoint");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.ElectricEnergyMeter", b =>
                {
                    b.Navigation("ElectricityMeasurementPoint");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.Organisation", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("TransOilApi.DataBase.Models.VoltageTransformer", b =>
                {
                    b.Navigation("ElectricityMeasurementPoint");
                });
#pragma warning restore 612, 618
        }
    }
}
